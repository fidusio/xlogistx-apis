package io.xlogistx.payment.paypal.daos;

import java.util.Date;

import org.zoxweb.server.filters.DateTimeValueFilter;
import org.zoxweb.shared.data.SetNameDescriptionDAO;
import org.zoxweb.shared.http.HATEOASLink;
import org.zoxweb.shared.util.ArrayValues;
import org.zoxweb.shared.util.GetNVConfig;
import org.zoxweb.shared.util.NVConfig;
import org.zoxweb.shared.util.NVConfigEntity;
import org.zoxweb.shared.util.NVConfigEntity.ArrayType;
import org.zoxweb.shared.util.NVConfigEntityLocal;
import org.zoxweb.shared.util.NVConfigManager;
import org.zoxweb.shared.util.SharedUtil;

@SuppressWarnings("serial")
public class PPSaleDAO
	extends SetNameDescriptionDAO
{
	
	public enum Params
		implements GetNVConfig
	{
		ID(NVConfigManager.createNVConfig("id", "ID of the sale transaction.", "ID", true, true, String.class)),
		AMOUNT(NVConfigManager.createNVConfigEntity("amount", "Details of the collected amount. ", "Amount", true, true, PPAmountDAO.NVC_PAYPAL_AMOUNT_DAO)),
		CREATE_TIME(NVConfigManager.createNVConfig("create_time", "Time of sale as defined in RFC 3339 Section 5.6. Value assigned by PayPal.", "CreateTime", true, true, false, Date.class, new DateTimeValueFilter("yyyy-MM-dd'T'HH:mm:ss'Z'", "UTC"))),
		STATE(NVConfigManager.createNVConfig("state", "State of the sale. One of the following: pending; completed; refunded; or partially_refunded. Value assigned by PayPal.", "State", true, true, String.class)),
		PARENT_PAYMENT(NVConfigManager.createNVConfig("parent_payment", "ID of the payment resource on which this transaction is based. Value assigned by PayPal.", "ParentPayment", true, true, String.class)),
		UPDATE_TIME(NVConfigManager.createNVConfig("update_time", "Time that the resource was last updated. Value assigned by PayPal.", "UpdateTime", true, true, false, Date.class, new DateTimeValueFilter("yyyy-MM-dd'T'HH:mm:ss'Z'", "UTC"))),
		PAYMENT_MODE(NVConfigManager.createNVConfig("payment_mode", "Specifies payment mode of the transaction. Only supported when the payment_method is set to paypal. Assigned by PayPal.", "PaymentMode", true, true, String.class)),
		REASON_CODE(NVConfigManager.createNVConfig("reason_code", "Reason code for the transaction state being Pending or Reversed. Only supported when the payment_method is set to paypal.Assigned by PayPal.", "ReasonCode", true, true, String.class)),
		CLEARING_TIME(NVConfigManager.createNVConfig("clearing_time", "Expected clearing time for eCheck transactions. Only supported when the payment_method is set to paypal. Assigned by PayPal.", "ClearingTime", true, true, String.class)),
		TRANSACTION_FEE(NVConfigManager.createNVConfigEntity("transaction_fee", "Transaction fee charged by PayPal for this transaction.", "TransactionFee", true, true, PPCurrencyDAO.NVC_PAYPAL_CURRENCY_DAO)),
		RECEIVABLE_AMOUNT(NVConfigManager.createNVConfigEntity("receivable_amount", "Net amount the merchant receives for this transaction in their receivable currency. Returned only in cross-currency use cases where a merchant bills a buyer in a non-primary currency for that buyer.", "ReceivableAmount", true, true, PPCurrencyDAO.NVC_PAYPAL_CURRENCY_DAO)),
		EXCHANGE_RATE(NVConfigManager.createNVConfig("exchange_rate", "Exchange rate applied for this transaction. Returned only in cross-currency use cases where a merchant bills a buyer in a non-primary currency for that buyer.", "ExchangeRate", true, true, String.class)),
		FMF_DETAILS(NVConfigManager.createNVConfigEntity("fmf_details", "Fraud Management Filter (FMF) details applied for the payment that could result in accept, deny, or pending action.", "FMFDetails", true, true, PPFMFDetailsDAO.NVC_PAYPAL_FMF_DETAILS_DAO)),
		RECEIPT_ID(NVConfigManager.createNVConfig("receipt_id", "Receipt ID is a 16-digit payment identification number returned for guest users to identify the payment.", "ReceiptID", true, true, String.class)),
		PROTECTION_ELIGIBILITY(NVConfigManager.createNVConfig("protection_eligibility", "The level of seller protection in force for the transaction. Only supported when the payment_method is set to paypal.", "ProtectionEligibility", true, true, String.class)),
		PROTECTION_ELIGIBILITY_TYPE(NVConfigManager.createNVConfig("protection_eligibility_type", "", "ProtectionEligibilityType", true, true, String.class)),
		LINKS(NVConfigManager.createNVConfigEntity("links", "HATEOAS links related to this call. Value generated by PayPal.", "Links", true, true, HATEOASLink.NVC_HATEOAS_LINK, ArrayType.LIST)),
		
		;
		
		private final NVConfig cType;
		
		Params(NVConfig c)
		{
			cType = c;
		}
		
		public NVConfig getNVConfig() 
		{
			return cType;
		}
		
	}
	
	public static final NVConfigEntity NVC_PAYPAL_SALE_DAO = new NVConfigEntityLocal(
																						"pp_sale_dao",
																						null,
																						"PPSaleDAO", 
																						true, 
																						false, 
																						false, 
																						false, 
																						PPSaleDAO.class, 
																						SharedUtil.extractNVConfigs(Params.values()), 
																						null, 
																						false, 
																						SetNameDescriptionDAO.NVC_NAME_DESCRIPTION_DAO
																					);
	
	public PPSaleDAO()
	{
		super(NVC_PAYPAL_SALE_DAO);
	}
	
	public String getID() 
	{
		return lookupValue(Params.ID);
	}
	
	public void setID(String id) 
	{
		setValue(Params.ID, id);
	}
	
	public PPAmountDAO getAmount() 
	{
		return lookupValue(Params.AMOUNT);
	}
	
	public void setAmount(PPAmountDAO amount) 
	{
		setValue(Params.AMOUNT, amount);
	}
	
	public long getCreateTime() 
	{
		return lookupValue(Params.CREATE_TIME);
	}
	
	public void setCreateTime(long time) 
	{
		setValue(Params.CREATE_TIME, time);
	}
	
	public String getState() 
	{
		return lookupValue(Params.STATE);
	}
	
	public void setState(String state) 
	{
		setValue(Params.STATE, state);
	}
	
	public String getParentPayment() 
	{
		return lookupValue(Params.PARENT_PAYMENT);
	}
	
	public void setParentPayment(String payment) 
	{
		setValue(Params.PARENT_PAYMENT, payment);
	}
	
	public long getUpdateTime() 
	{
		return lookupValue(Params.UPDATE_TIME);
	}
	
	public void setUpdateTime(long time) 
	{
		setValue(Params.UPDATE_TIME, time);
	}
	
	public String getPaymentMode() 
	{
		return lookupValue(Params.PAYMENT_MODE);
	}
	
	public void setPaymentMode(String mode) 
	{
		setValue(Params.PAYMENT_MODE, mode);
	}
	
	public String getReasonCode() 
	{
		return lookupValue(Params.REASON_CODE);
	}
	
	public void setReasonCode(String code) 
	{
		setValue(Params.REASON_CODE, code);
	}
	
	public String getClearingTime() 
	{
		return lookupValue(Params.CLEARING_TIME);
	}
	
	public void setClearingTime(String time) 
	{
		setValue(Params.CLEARING_TIME, time);
	}
	
	public PPCurrencyDAO getTransactionFee() 
	{
		return lookupValue(Params.TRANSACTION_FEE);
	}
	
	public void setTransactionFee(PPCurrencyDAO fee) 
	{
		setValue(Params.TRANSACTION_FEE, fee);
	}

	public PPCurrencyDAO getReceivableAmount() 
	{
		return lookupValue(Params.RECEIVABLE_AMOUNT);
	}
	
	public void setReceivableAmount(PPCurrencyDAO amount) 
	{
		setValue(Params.RECEIVABLE_AMOUNT, amount);
	}
	
	public String getExchangeRate() 
	{
		return lookupValue(Params.EXCHANGE_RATE);
	}
	
	public void setExchangeRate(String rate) 
	{
		setValue(Params.EXCHANGE_RATE, rate);
	}
	
	public PPFMFDetailsDAO getFMFDetails() 
	{
		return lookupValue(Params.FMF_DETAILS);
	}
	
	public void setFMFDetails(PPFMFDetailsDAO fmfDetails) 
	{
		setValue(Params.FMF_DETAILS, fmfDetails);
	}
	
	public String getReceiptID() 
	{
		return lookupValue(Params.RECEIPT_ID);
	}
	
	public void setReceiptID(String id) 
	{
		setValue(Params.RECEIPT_ID, id);
	}
	
	public String getProtectionEligibility() 
	{
		return lookupValue(Params.PROTECTION_ELIGIBILITY);
	}
	
	public void setProtectionEligibility(String eligibility) 
	{
		setValue(Params.PROTECTION_ELIGIBILITY, eligibility);
	}
	
	public String getProtectionEligibilityType() 
	{
		return lookupValue(Params.PROTECTION_ELIGIBILITY_TYPE);
	}
	
	public void setProtectionEligibilityType(String type) 
	{
		setValue(Params.PROTECTION_ELIGIBILITY_TYPE, type);
	}
	
	@SuppressWarnings("unchecked")
	public ArrayValues<HATEOASLink> getLinks() 
	{
		return (ArrayValues<HATEOASLink>) lookup(Params.LINKS);
	}
	
}