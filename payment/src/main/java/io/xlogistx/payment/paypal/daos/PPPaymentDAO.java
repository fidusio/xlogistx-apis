package io.xlogistx.payment.paypal.daos;

import java.util.Date;


import org.zoxweb.server.filters.DateTimeValueFilter;
import org.zoxweb.shared.data.SetNameDescriptionDAO;
import org.zoxweb.shared.http.HATEOASLink;
import org.zoxweb.shared.util.ArrayValues;
import org.zoxweb.shared.util.GetNVConfig;
import org.zoxweb.shared.util.NVConfig;
import org.zoxweb.shared.util.NVConfigEntity;
import org.zoxweb.shared.util.NVConfigEntityLocal;
import org.zoxweb.shared.util.NVConfigManager;
import org.zoxweb.shared.util.NVEntity;
import org.zoxweb.shared.util.SharedUtil;
import org.zoxweb.shared.util.NVConfigEntity.ArrayType;

@SuppressWarnings("serial")
public class PPPaymentDAO
	extends SetNameDescriptionDAO
{
	
	public enum Params
		implements GetNVConfig
	{
		INTENT(NVConfigManager.createNVConfig("intent", "Payment intent. Must be set to sale for immediate payment, authorize to authorize a payment for capture later, or order to create an order.", "Intent", true, true, String.class)),
		PAYER(NVConfigManager.createNVConfigEntity("payer", "Source of the funds for this payment represented by a PayPal account or a direct credit card.", "Payer", true, true, PPPayerDAO.NVC_PAYPAL_PAYER_DAO)),
		TRANSACTIONS(NVConfigManager.createNVConfigEntity("transactions", "Transactional details including the amount and item details.", "Transactions", true, true, PPTransactionDAO.NVC_PAYPAL_TRANSACTION_DAO, ArrayType.LIST)),
		//REDIRECT_URLS(NVConfigManager.createNVConfigEntity("redirect_urls", "Set of redirect URLs you provide only for PayPal-based payments. Returned only when the payment is in created state. ", "RedirectURLs", true, true, PPRedirectURLS)),
		ID(NVConfigManager.createNVConfig("id", "ID of the created payment. Value assigned by PayPal.", "ID", false, true, String.class)),
		CREATE_TIME(NVConfigManager.createNVConfig("create_time", "Payment creation time as defined in RFC 3339 Section 5.6.Value assigned by PayPal.", "CreateTime", false, true, false, Date.class, new DateTimeValueFilter("yyyy-MM-dd'T'HH:mm:ss'Z'", "UTC"))),
		STATE(NVConfigManager.createNVConfig("state", "Payment state. Must be one of the following: created; approved; failed; pending; canceled; expired, or in_progress. Value assigned by PayPal.", "State", false, true, String.class)),
		UPDATE_TIME(NVConfigManager.createNVConfig("update_time", "Time that the resource was last updated. Value assigned by PayPal.", "UpdateTime", false, true, false, Date.class, new DateTimeValueFilter("yyyy-MM-dd'T'HH:mm:ss'Z'", "UTC"))),
		EXPERIENCE_PROFILE_ID(NVConfigManager.createNVConfig("experience_profile_id", "Identifier for the payment experience.", "ExperienceProfileID", false, true, String.class)),
		LINKS(NVConfigManager.createNVConfigEntity("links", "HATEOAS links related to this call. Value generated by PayPal.", "Links", true, true, HATEOASLink.NVC_HATEOAS_LINK, ArrayType.LIST)),
		
		;
		
		private final NVConfig cType;
		
		Params(NVConfig c)
		{
			cType = c;
		}
		
		public NVConfig getNVConfig() 
		{
			return cType;
		}
	}
	
	public static final NVConfigEntity NVC_PAYPAL_PAYMENT_DAO = new NVConfigEntityLocal(
																							"pp_payment_dao",
																							null,
																							"PPPaymentDAO", 
																							true, 
																							false, 
																							false, 
																							false, 
																							PPPaymentDAO.class, 
																							SharedUtil.extractNVConfigs(Params.values()), 
																							null, 
																							false, 
																							SetNameDescriptionDAO.NVC_NAME_DESCRIPTION_DAO
																						);
	
	public PPPaymentDAO()
	{
		super(NVC_PAYPAL_PAYMENT_DAO);
	}
	
	public String getIntent()
	{
		return lookupValue(Params.INTENT);
	}
	
	public void setIntent(String intent)
	{
		setValue(Params.INTENT, intent);
	}

	public PPPayerDAO getPayer()
	{
		return lookupValue(Params.PAYER);
	}
	
	public void setPayer(PPPayerDAO payer)
	{
		setValue(Params.PAYER, payer);
	}
	
	@SuppressWarnings("unchecked")
	public ArrayValues<NVEntity> getTransactions()
	{
		return (ArrayValues<NVEntity>) lookup(Params.TRANSACTIONS);
	}
	
//	@SuppressWarnings("unchecked")
//	public void setTransactions(ArrayValues<PPTransactionDAO> values)
//	{
//		ArrayValues<PPTransactionDAO> content = (ArrayValues<PPTransactionDAO>) lookup(Params.TRANSACTIONS);
//		content.add(values.values(), true);
//	}
//	
//	@SuppressWarnings("unchecked")
//	public void setTransactions(List<PPTransactionDAO> values)
//	{
//		ArrayValues<PPTransactionDAO> content = (ArrayValues<PPTransactionDAO>) lookup(Params.TRANSACTIONS);
//		content.add(values.toArray(new PPTransactionDAO[0]), true);
//	}
	
	public String getID()
	{
		return lookupValue(Params.ID);
	}
	
	public void setID(String id)
	{
		setValue(Params.ID, id);
	}
	
	public long getCreateTime()
	{
		return lookupValue(Params.CREATE_TIME);
	}
	
	public void setCreateTime(long time)
	{
		setValue(Params.CREATE_TIME, time);
	}
	
	public String getState()
	{
		return lookupValue(Params.STATE);
	}
	
	public void setState(String state)
	{
		setValue(Params.STATE, state);
	}
	
	public long getUpdateTime()
	{
		return lookupValue(Params.UPDATE_TIME);
	}
	
	public void setUpdateTime(long time)
	{
		setValue(Params.UPDATE_TIME, time);
	}
	
	public String getExperienceProfileID()
	{
		return lookupValue(Params.EXPERIENCE_PROFILE_ID);
	}
	
	public void setExperienceProfileID(String id)
	{
		setValue(Params.EXPERIENCE_PROFILE_ID, id);
	}
	
	@SuppressWarnings("unchecked")
	public ArrayValues<HATEOASLink> getLinks() 
	{
		return (ArrayValues<HATEOASLink>) lookup(Params.LINKS);
	}
	
}